{"version":3,"sources":["utils/Wallet.js","components/Navigation/Navigation.jsx","assets/image/empty_shelve.jpg","components/Main/Main.jsx","components/Footer/Footer.jsx","assets/image/eth-icon.png","components/Card/Card.jsx","hooks/useContract.js","hooks/useNftContract.js","App.js","Pages/Lab/Lab.jsx","Pages/Profile/Profile.jsx","index.js"],"names":["require","config","PROVIDER","ethers","providers","JsonRpcProvider","process","RINKEBY_RPC_URL","useWallet","useState","defaultAccount","setDefaultAccount","signer","setSigner","provider","setProvider","connectWallet","useCallback","a","window","ethereum","request","method","then","accounts","accountChangedHandler","_provider","Web3Provider","_signer","getSigner","e","console","log","alert","account","on","useEffect","Navigation","className","to","href","diameter","seed","parseInt","slice","_address","address","toString","length","truncateAddress","onClick","Main","contract","tokens","setTokens","navigate","useNavigate","processUri","uri","axios","get","split","res","getTokens","nftContract","getAllMarketTokens","data","Promise","all","map","token","tokenURI","tokenUri","convert","cval","meta","tokenId","Number","value","utils","formatEther","convertedVal","owner","seller","toLowerCase","claimed","name","image","imageUrl","description","attributes","buyToken","_tokenValue","tokenValue","parseEther","tx","wait","location","reload","btnText","btnAction","src","emptyShelve","Footer","Card","alt","attrib","trait_type","ethIcon","toFixed","useNftContract","abi","contractAddress","setContract","_PROVIDER","Object","keys","getContract","rawContract","Contract","connectedContract","connect","useContract","NftContract","NftContractAddress","App","style","display","justifyContent","alignItems","minHeight","client","ipfsHttpClient","Lab","setName","setDescription","price","setPrice","ipfsImage","setIpfsImage","setAttributes","handleSetAttrib","target","attribObj","arr","index","findIndex","el","prev","uploadToIpfs","file","files","add","progress","prog","added","path","mintToken","JSON","stringify","title","type","mintedBy","saved","savedUrl","onSubmit","preventDefault","onChange","placeholder","Profile","url","getMyTokens","_token","marketTokens","sellToken","sendTokenToMarket","ReactDOM","render","StrictMode","element","document","getElementById"],"mappings":"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","file":"static/js/main.5f2e0d87.chunk.js","sourcesContent":["import { useState, useCallback, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nrequire(\"dotenv\").config();\n\nexport const PROVIDER = new ethers.providers.JsonRpcProvider(process.env.RINKEBY_RPC_URL);\n\nexport const useWallet = () => {\n  const [defaultAccount, setDefaultAccount] = useState();\n  const [signer, setSigner] = useState({});\n  const [provider, setProvider] = useState({});\n\n  // let provider, signer;\n\n  const connectWallet = useCallback(async () => {\n    if (window.ethereum) {\n      try {\n        window.ethereum\n          .request({ method: \"eth_requestAccounts\" })\n          .then((accounts) => accountChangedHandler(accounts[0]));\n        // set provider and signer\n        const _provider = new ethers.providers.Web3Provider(window.ethereum);\n        const _signer = _provider.getSigner();\n        setProvider(_provider);\n        setSigner(_signer);\n      } catch (e) {\n        console.log(\"Error trying to connect wallet: \" + e);\n      }\n    } else {\n      alert(\"Please install metamask to continue\");\n    }\n  });\n\n  const accountChangedHandler = (account) => setDefaultAccount(account);\n  window.ethereum.on(\"accountsChanged\", accountChangedHandler);\n\n  useEffect(() => {\n    connectWallet();\n  }, []);\n\n  return { signer, provider, PROVIDER, defaultAccount, connectWallet };\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Jazzicon from \"react-jazzicon\";\nimport { useState } from \"react\";\nimport \"./Navigation.scss\";\nimport { useWallet } from \"../../utils/Wallet\";\n\nconst Navigation = () => {\n  const { defaultAccount, connectWallet } = useWallet();\n  const truncateAddress = (_address) => {\n    if (!_address) return;\n    const address = _address.toString();\n    return (\n      address.slice(0, 5) +\n      \"...\" +\n      address.slice(address.length - 4, address.length)\n    );\n  };\n\n  return (\n    <div className=\"app__nav\">\n      <div className=\"app__nav-logo\">Oceanic</div>\n      <div className=\"app__nav-links\">\n        <div className=\"links\">\n          <Link to=\"/\">Market</Link>\n        </div>\n        <div className=\"links\">\n          <Link to=\"/profile\">Profile</Link>\n        </div>\n        <div className=\"links\">\n          <Link to=\"/lab\">Lab</Link>\n        </div>\n      </div>\n      <div className=\"app__nav-profile\">\n        {defaultAccount ? (\n          <div className=\"profile-true\">\n            <a\n              className=\"profile-icon\"\n              href={`https://rinkeby.etherscan.io/address/${defaultAccount}`}\n            >\n              <Jazzicon\n                diameter={50}\n                seed={parseInt(defaultAccount.slice(2, 10), 16)}\n              />\n            </a>\n            <a\n              href={`https://rinkeby.etherscan.io/address/${defaultAccount}`}\n              className=\"profile-address\"\n            >\n              {truncateAddress(defaultAccount)}\n            </a>\n          </div>\n        ) : (\n          <div className=\"profile-false\" onClick={() => connectWallet()}>\n            Connect\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Navigation;\n","export default __webpack_public_path__ + \"static/media/empty_shelve.1708fa93.jpg\";","import axios from \"axios\";\nimport { ethers } from \"ethers\";\nimport React from \"react\";\nimport { Card } from \"..\";\nimport \"./Main.scss\";\nimport { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport emptyShelve from \"../../assets/image/empty_shelve.jpg\"\n\nconst Main = ({ contract }) => {\n  const [tokens, setTokens] = useState();\n\n  const navigate = useNavigate();\n\n  const processUri = async (uri) => {\n    const res = await axios.get(\n      `https://ipfs.infura.io/ipfs/${uri.toString().split(\"//\")[1]}`\n    );\n    return res;\n  };\n\n  // fetch all NFTs on the smart contract\n  const getTokens = async (nftContract) => {\n    try {\n      const data = await nftContract.getAllMarketTokens();\n      const tokens = await Promise.all(\n        data.map(async (token) => {\n          const tokenUri = await nftContract.tokenURI(token[0]);\n          console.log(`URI [${token[0]}] -> ${tokenUri}`);\n          const cval = await nftContract.convert(token[1]);\n          const meta = await processUri(tokenUri);\n          return {\n            tokenId: Number(token[0]),\n            value: ethers.utils.formatEther(token[1].toString()),\n            convertedVal: ethers.utils.formatEther(cval.toString()),\n            owner: token[2],\n            seller: token[3].toLowerCase(),\n            claimed: token[4],\n            name: meta.data.name,\n            image: meta.data.imageUrl,\n            description: meta.data.description,\n            attributes: meta.data.attributes,\n          };\n        })\n      );\n      console.log(tokens);\n      setTokens(tokens);\n      return tokens;\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const buyToken = async (tokenId, _tokenValue) => {\n    console.log(`buy ${tokenId} for ${_tokenValue}`);\n    const tokenValue = ethers.utils.parseEther(_tokenValue.toString());\n    try {\n      const tx = await contract.buyToken(tokenId, { value: tokenValue });\n      await tx.wait(1);\n      console.log(`successfully bought #${tokenId} for ${tokenValue}`);\n      alert(\"Successfully bought token\");\n      navigate(\"/\");\n      window.location.reload();\n    } catch (e) {\n      console.log(\"error while buying token: \" + e);\n    }\n  };\n\n  useEffect(() => {\n    if (contract) {\n      getTokens(contract);\n    }\n  }, [contract]);\n\n  return (\n    <>\n      {tokens ? (\n        <div className=\"app__main\">\n          <div className=\"app__main-title\">All tokens currently on sale</div>\n          <div className=\"app__main-items\">\n            {tokens.length ? (\n              tokens.map((token) => (\n                <Card data={token} btnText=\"Buy\" btnAction={buyToken} />\n              ))\n            ) : (\n              <div className=\"empty-view\">\n                <div className=\"e-title\">It's empty in here </div>\n                <img src={emptyShelve} />\n              </div>\n            )}\n          </div>\n        </div>\n      ) : (\n        <div className=\"loading-text\">Loading...</div>\n      )}\n    </>\n  );\n};\n\nexport default Main;\n","import React from 'react'\nimport \"./Footer.scss\"\n\nconst Footer = () => {\n  return (\n    <div className='app__footer'>Mint a sea creature today</div>\n  )\n}\n\nexport default Footer","export default __webpack_public_path__ + \"static/media/eth-icon.abaeb0f7.png\";","import React from \"react\";\nimport ethIcon from \"../../assets/image/eth-icon.png\";\nimport { useWallet } from \"../../utils/Wallet\";\nimport \"./Card.scss\";\n\nconst Card = ({ data, btnText, btnAction }) => {\n  const { defaultAccount } = useWallet();\n  return (\n    <div className=\"card\">\n      <div className=\"card-image\">\n        <img src={data.image} alt=\"card-img\" />\n      </div>\n      {/* <hr /> */}\n      <div className=\"card-content\">\n        <div className=\"content-text\">\n          <div className=\"content-title\">{data.name}</div>\n          <div className=\"content-desc\">{data.description}</div>\n        </div>\n        <div className=\"card-attrib\">\n          {data.attributes.map((attrib) => (\n            <div className=\"attrib-div\">\n              <div className=\"attrib-name\">{attrib.trait_type}</div>\n              <div className=\"attrib-value\">{attrib.value}</div>\n            </div>\n          ))}\n        </div>\n        <div className=\"content-action\">\n          <div className=\"price\">\n            <img src={ethIcon} alt=\"eth-icon\" />\n            {data.value} (${Number(data.convertedVal).toFixed(2)})\n          </div>\n          {data.seller == defaultAccount ? (\n            <div>Owned</div>\n          ) : (\n            <div\n              className=\"buy-btn\"\n              onClick={() => btnAction(data.tokenId, data.value)}\n            >\n              {btnText}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { ethers } from \"ethers\";\nimport { useWallet } from \"../utils/Wallet\";\nrequire(\"dotenv\").config();\n\nexport const useContract = (abi, contractAddress) => {\n  const [contract, setContract] = useState();\n  const {\n    signer: _signer,\n    provider: _provider,\n    PROVIDER: _PROVIDER,\n  } = useWallet();\n\n  const signer = Object.keys(_signer).length > 0 ? _signer : null;\n  const provider = Object.keys(_provider).length > 0 ? _provider : _PROVIDER;\n\n  const getContract = useCallback(async () => {\n    try {\n      let rawContract = new ethers.Contract(contractAddress, abi, provider);\n      let connectedContract = signer\n        ? rawContract.connect(signer)\n        : rawContract;\n      if (connectedContract) {\n        setContract(connectedContract);\n      } else {\n        console.log(\"Connecting contract...\");\n      }\n    } catch (e) {\n      console.log(\"Error getting contract: \" + e);\n    }\n  }, [abi, contractAddress, signer, provider]);\n\n  useEffect(() => {\n    if (contractAddress) getContract();\n  }, [contractAddress, getContract, _provider, _signer]);\n\n  return contract;\n};\n","import { useContract } from \"./useContract\";\nimport NftContract from \"../contracts/NftContract-artifact.json\";\nimport NftContractAddress from \"../contracts/NftContract-address.json\";\n\nexport const useNftContract = () =>\n  useContract(NftContract.abi, NftContractAddress.NftContract);\n","import { Navigation, Main, Footer } from \"./components\";\nimport \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport { useNftContract } from \"./hooks\";\nimport { useWallet } from \"./utils/Wallet\";\n\nfunction App() {\n  const contract = useNftContract();\n  const { connectWallet } = useWallet();\n\n  return (\n    <div className=\"App\">\n      {contract ? (\n        <div>\n          {/* {console.log(\"contract-> \" + JSON.stringify(contract, null, 4))} */}\n          <Navigation />\n          <Main contract={contract} />\n          <Footer />\n        </div>\n      ) : (\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            minHeight: \"100vh\",\n          }}\n        >\n          Loading...\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useState } from \"react\";\nimport { Navigation, Footer } from \"../../components\";\nimport { useNavigate } from \"react-router-dom\";\nimport { create as ipfsHttpClient } from \"ipfs-http-client\";\nimport { useNftContract } from \"../../hooks\";\nimport { ethers } from \"ethers\";\nimport { useWallet } from \"../../utils/Wallet\";\nimport \"./Lab.scss\";\n\n// initialize IPFS\nconst client = ipfsHttpClient(\"https://ipfs.infura.io:5001/api/v0\");\n\nconst Lab = () => {\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [price, setPrice] = useState(0);\n  const [ipfsImage, setIpfsImage] = useState(\"\");\n  const [attributes, setAttributes] = useState([]);\n\n  const navigate = useNavigate();\n  const contract = useNftContract();\n  const { defaultAccount } = useWallet();\n\n  const handleClose = () => {\n    setAttributes([]);\n    navigate(\"/\");\n  };\n\n  const handleSetAttrib = (trait_type, e) => {\n    const { value } = e.target;\n    const attribObj = { trait_type, value };\n    const arr = attributes;\n    const index = arr.findIndex((el) => el.trait_type === trait_type);\n\n    // if attribute already exists, update it\n    if (index >= 0) {\n      arr[index] = { trait_type, value };\n      setAttributes(arr);\n      return;\n    }\n    // else create new one and add to list\n    setAttributes((prev) => [...prev, attribObj]);\n  };\n\n  const uploadToIpfs = async (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n    try {\n      const added = await client.add(file, {\n        progress: (prog) => console.log(`received: ${prog}`),\n      });\n      if (!added.path) {\n        alert(\"Failed to upload image to IPFS\");\n      }\n      const imageUrl = `https://ipfs.infura.io/ipfs/${added.path}`;\n      // const imageUrl = `ipfs://${added.path}`;\n      console.log(\"ipfs image -> \" + imageUrl);\n      setIpfsImage(imageUrl);\n    } catch (error) {\n      console.log(\"Error uploading file: \", error);\n    }\n  };\n\n  const mintToken = async () => {\n    if (!name || !description || !price || !ipfsImage) {\n      alert(\"Please complete all fields first!\");\n      return;\n    }\n    const data = JSON.stringify({\n      title: name,\n      type: \"object\",\n      name,\n      description,      \n      imageUrl: ipfsImage,\n      mintedBy: defaultAccount,\n      attributes,\n    });\n\n    try {\n      console.log(\"Started processing metadata...\");\n      // save token metadata to IPFS\n      const saved = await client.add(data);\n      // get IPFS url for uploaded metadata\n      // const savedUrl = `https://ipfs.infura.io/ipfs/${saved.path}`;\n      const savedUrl = `ipfs://${saved.path}`;\n      console.log(`Saved URL -> ${savedUrl}`);\n\n      // Send metadata and mint new token from here\n      console.log(\"Started minting token...\");\n      const tx = await contract.mintToken(\n        savedUrl.toString(),\n        ethers.utils.parseEther(price.toString())\n      );\n      console.log(\"Successfully minted token.\");\n      await tx.wait(1); // wait for 1 block confirmation\n      navigate(\"/\");\n    } catch (e) {\n      console.log(`Error while minting token -> ${e}`);\n    }\n  };\n\n  return (\n    <>\n      <Navigation />\n      <div className=\"app__lab\">\n        <div className=\"app__lab-title\">Mint a new token</div>\n        <div className=\"lab-form\">\n          <form onSubmit={(e) => e.preventDefault()}>\n            <div className=\"form-div\">\n              <div className=\"form-title\">Name</div>\n              <input\n                onChange={(e) => setName(e.target.value)}\n                type=\"text\"\n                placeholder=\"Name of sea creature\"\n              />\n            </div>\n            <div className=\"form-div\">\n              <div className=\"form-title\">Description</div>\n              <input\n                onChange={(e) => setDescription(e.target.value)}\n                type=\"text\"\n                placeholder=\"Description of sea creature\"\n              />\n            </div>\n            <div className=\"form-div\">\n              <div className=\"form-title\">Price(in ETH)</div>\n              <input\n                onChange={(e) => setPrice(e.target.value)}\n                type=\"number\"\n                placeholder=\"Price of token\"\n              />\n            </div>\n            <div className=\"form-div\">\n              <div className=\"form-title\">Image</div>\n              <input type=\"file\" onChange={async (e) => uploadToIpfs(e)} />\n            </div>\n            <div className=\"form-subtitle\">Properties</div>\n            <div className=\"form-div\">\n              <div className=\"form-title\">Color</div>\n              <input\n                type=\"text\"\n                onChange={(e) => handleSetAttrib(\"color\", e)}\n                placeholder=\"Color of creature\"\n              />\n            </div>\n            <div className=\"form-div\">\n              <div className=\"form-title\">Weight</div>\n              <input\n                type=\"number\"\n                onChange={(e) => handleSetAttrib(\"weight\", e)}\n                placeholder=\"Weight of creature (in Kilograms)\"\n              />\n            </div>\n            <div className=\"form-div\">\n              <div className=\"form-title\">Age</div>\n              <input\n                type=\"number\"\n                onChange={(e) => handleSetAttrib(\"age\", e)}\n                placeholder=\"Age of creature (in months)\"\n              />\n            </div>\n            <div className=\"lab-form-bottom\">\n              <div onClick={handleClose} className=\"close-btn\">\n                Close\n              </div>\n              <button\n                // disabled={!ipfsImage}\n                className=\"mint-btn\"\n                onClick={() => mintToken()}\n              >\n                Mint\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n      <Footer />\n    </>\n  );\n};\n\nexport default Lab;\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ethers } from \"ethers\";\nimport { useNftContract } from \"../../hooks\";\nimport { Navigation, Footer, Card } from \"../../components\";\nimport { useNavigate } from \"react-router-dom\";\nimport emptyShelve from \"../../assets/image/empty_shelve.jpg\";\nimport \"./Profile.scss\";\n\nconst Profile = () => {\n  const [tokens, setTokens] = useState();\n  const contract = useNftContract();\n\n  const navigate = useNavigate();\n\n  const processUri = async (uri) => {\n    const url = `https://ipfs.infura.io/ipfs/${uri.toString().split(\"//\")[1]}`;\n    console.log(url)\n    const res = await axios.get(url);\n    return res;\n  };\n\n  // fetch all NFTs on the smart contract\n  const getTokens = async (nftContract) => {\n    try {\n      const data = await nftContract.getMyTokens();\n      const tokens = await Promise.all(\n        data.map(async (_token) => {\n          const tokenUri = await nftContract.tokenURI(_token);\n          const token = await nftContract.marketTokens(_token);\n          const cval = await nftContract.convert(token.value);\n          const meta = await processUri(tokenUri);\n          return {\n            tokenId: Number(_token),\n            value: ethers.utils.formatEther(token[1].toString()),\n            convertedVal: ethers.utils.formatEther(cval.toString()),\n            owner: token[2],\n            seller: token[3],\n            claimed: token[4],\n            name: meta.data.name,\n            image: meta.data.image,\n            description: meta.data.description,\n            attributes: meta.data.attributes,\n          };\n        })\n      );\n      console.log(tokens);\n      setTokens(tokens);\n      return tokens;\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const sellToken = async (tokenId, _tokenValue) => {\n    console.log(\"sell -> \" + tokenId + \" for \" + _tokenValue);\n    const tokenValue = ethers.utils.parseEther(_tokenValue.toString());\n    try {\n      const tx = await contract.sendTokenToMarket(tokenId, tokenValue);\n      await tx.wait(1);\n      console.log(\"Successfully listed token #\" + tokenId);\n      alert(\"Successfully listed token\");\n      navigate(\"/\");\n      window.location.reload();\n    } catch (e) {\n      console.log(\"Error while trying to list token: \" + e);\n    }\n  };\n\n  useEffect(() => {\n    if (contract) {\n      getTokens(contract);\n    }\n  }, [contract]);\n  return (\n    <>\n      <Navigation />\n      {tokens ? (\n        <div className=\"app__profile\">\n          <div className=\"app__profile-title\">All your tokens</div>\n          <div className=\"app__profile-items\">\n            {tokens.length ? (\n              tokens.map((token) => (\n                <Card data={token} btnText=\"Sell\" btnAction={sellToken} />\n              ))\n            ) : (\n              <div className=\"empty-view\">\n                <div className=\"e-title\">It's empty in here </div>\n                <img src={emptyShelve} />\n              </div>\n            )}\n          </div>\n        </div>\n      ) : (\n        <div className=\"loading-text\">Loading</div>\n      )}\n\n      <Footer />\n    </>\n  );\n};\n\nexport default Profile;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Lab, Profile } from \"./Pages\";\nimport { HashRouter as Router, Routes, Route } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<App />} />\n        <Route path=\"/profile\" element={<Profile />} />\n        <Route path=\"/lab\" element={<Lab />} />\n      </Routes>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}